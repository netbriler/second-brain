version: '3.7'


networks:
  app_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/24

x-backend-service: &x-backend-service
  image: briler/second-brain:latest
  env_file:
    - .env
  restart: unless-stopped
  volumes:
    - static_volume:/app/static
  labels:
    - "com.centurylinklabs.watchtower.enable=true"
  depends_on:
    - postgres
    - redis
  networks:
    - app_net
  healthcheck:
    test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
    interval: 10s
    timeout: 3s
    retries: 5
    start_period: 20s

services:

  migrate:
    <<: *x-backend-service
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py seeds &&
             python manage.py collectstatic --clear --noinput"
    restart: "no"

  backend:
    <<: *x-backend-service
    depends_on:
      - migrate
    expose:
      - 8000
    networks:
      app_net:
        ipv4_address: 172.30.0.10
    command: ["gunicorn", "-c", "/app/app/gunicorn.py", "app.wsgi"]

  nginx:
    image: nginx:1.25-alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - static_volume:/static
      - ./nginx/static/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    networks:
      app_net:
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  telegram-bot-pooling:
    <<: *x-backend-service
    command: python manage.py run_telegram_polling

  postgres:
    image: postgres:16
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - app_net
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env

  redis:
    image: redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - app_net
    volumes:
      - redis_data:/data

  celery:
    <<: *x-backend-service
    command: celery -A app worker --loglevel=debug --beat --scheduler=django_celery_beat.schedulers:DatabaseScheduler

  watchtower:
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    command: --label-enable --cleanup

volumes:
  postgres_data:
  static_volume:
  redis_data:
