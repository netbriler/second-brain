version: '3.7'

x-backend-service: &x-backend-service
  image: briler/second-brain:latest
  env_file:
    - .env
  restart: unless-stopped
  labels:
    - "com.centurylinklabs.watchtower.enable=true"

services:

  migrate:
    <<: *x-backend-service
    depends_on:
      - postgres
    command: python manage.py migrate --noinput
    restart: "no"

  backend:
    <<: *x-backend-service
    expose:
      - 8000
    volumes:
      - static_volume:/app/static
    depends_on:
      - postgres
    command: [ "gunicorn", "-c", "/app/app/gunicorn.py", "app.wsgi" ]

  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
    volumes:
      - static_volume:/static
      - ./nginx/static/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
    restart: unless-stopped

  telegram-bot-webhook:
    <<: *x-backend-service
    expose:
      - 8000
    depends_on:
      - postgres
    command: python manage.py run_telegram_webhook

  # uncomment if you want to use pooling instead of webhook
  #  telegram-bot-pooling:
  #    <<: *x-backend-service
  #    depends_on:
  #      - postgres
  #    command: python manage.py run_telegram_polling

  postgres:
    image: postgres
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env

  watchtower:
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    labels:
      - "com.centurylinklabs.watchtower.lifecycle.post-update=./bin/restart_all.sh"

volumes:
  postgres_data:
  static_volume:
